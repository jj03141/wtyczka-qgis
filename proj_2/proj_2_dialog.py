# -*- coding: utf-8 -*-
"""
/***************************************************************************
 projekt2Dialog
                                 A QGIS plugin
 Ta wtyczka pozwala obliczyć różnicę wysokości między dwoma punktami oraz pole powierzchni dla obszaru ograniczonego przez minimum 3 punkty
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-06-08
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Jakub Jasiewicz, Patryk Łabędzki
        email                : jakub.jasiewicz3@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from math import *
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'proj_2_dialog_base.ui'))


class projekt2Dialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(projekt2Dialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        self.pushButton_liczelementy.clicked.connect(self.licz_elementy)
        #self.pushButton_dH.clicked.connect(self.roznica_wysokosci)
        self.pushButton_pole.clicked.connect(self.pole)
        
    def licz_elementy(self):
        liczba_elementów = len(self.mMapLayerComboBox_layers.currentLayer().selectedFeatures())
        self.label_liczbaelementow.setText(str(liczba_elementów))
        
    '''        
    def odleglosci(self):
        selected_features = self.mMapLayerComboBox_layers.currentLayer().selectedFeatures()
        X = []
        Y = []
        ODL = []
        for feature in selected_features:
            feature_geometry = feature.geometry().asPoint()
            x = feature_geometry[0]
            y = feature_geometry[1]
            X.append(float(x))
            Y.append(float(y))
        
        t = 0
        for i,j in zip(X,Y):
            #self.textEdit_d.append(f'X = {i:.3f}; Y = {j:.3f}\n')
            if t == len(X) - 1:
                m = 0
            else:
                m = t + 1
            dx = X[m] - X[t]
            dy = Y[m] - Y[t]
            odl = sqrt(dx**2 + dy**2) 
            t += 1
            ODL.append(odl)
            if t == len(X):
                break
            
        for i in ODL:
            self.textEdit_pole.append(f'Odległość: {i:.3f}\n')
        '''
        
    def pole(self):
        self.label_error.clear()
        selected_features = self.mMapLayerComboBox_layers.currentLayer().selectedFeatures()
        X = []
        Y = []
        ODL = []
        for feature in selected_features:
            feature_geometry = feature.geometry().asPoint()
            x = feature_geometry[0]
            y = feature_geometry[1]
            X.append(float(x))
            Y.append(float(y))
        
        n = len(X)
        if n < 3:
            self.label_pole.setText('BŁĄD!')
            self.label_error.setText('Zaznacz więcej punktów!')
        
        else:
            pole = 0
            for i in range(n-1):
                x1 = X[i]
                y1 = Y[i]
                x2 = X[i + 1]
                y2 = Y[i + 1]
                pole += x1 * y2 - x2 * y1
            
            pole /= 2
            poletxt = f'Pole: {abs(pole):.3f} [m2]'
            #self.textEdit_pole.append(f'Pole: {abs(pole):.3f} [m2] \n')
            self.label_pole.setText(str(poletxt))
            
        
